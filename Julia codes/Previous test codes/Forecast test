using Pkg
#Pkg.add("CSV")
using CSV
#Pkg.add("DataFrames")
using DataFrames
#Pkg.add("Dates")
using Dates
#Pkg.add("LinearAlgebra")
using LinearAlgebra
#Pkg.add("Plots")
using Plots


df= CSV.read("C:\\Users\\tokyo\\Downloads\\current.csv", DataFrame)
df = DataFrame(df)
df_cleaned=df[2:end, :]

date_format="mm/dd/yyyy"

df_cleaned[!, :sasdate] = Dates.Date.(df_cleaned[!, :sasdate], date_format)

@show(df_cleaned)


df_cleaned = coalesce.(df_cleaned, NaN)

transformation_codes = DataFrame(Series = names(df)[2:end], Transformation_Code = collect(df[1, 2:end]))

function apply_transformation(series, code)
    if code == 1
        # No transformation
        return series
    elseif code == 2
        # First difference
        return mdiff(series)
    elseif code == 3
        # Second difference
        return mdiff(mdiff(series))
    elseif code == 4
        # Log
        return log.(series)
    elseif code == 5
        # First difference of log
        return mdiff(log.(series))
    elseif code == 6
        # Second difference of log
        return mdiff(mdiff(log.(series)))
    elseif code == 7
        # Delta (x_t/x_{t-1} - 1)
        return series ./ lag(series, 1) .- 1
    else
        throw(ArgumentError("Invalid transformation code"))
    end
end

function lag(v::Vector, l::Integer)
    nan = [NaN for _ in 1:l]
    return [nan; v[1:(end-l)]]
end

function lead(v::Vector, l::Integer)
    nan = [NaN for _ in 1:l]
    return [v[(l+1):end]; nan]
end

function mdiff(v::Vector)
    return v .- lag(v, 1)
end

df_proof= copy(df_cleaned)

for row in eachrow(transformation_codes)
    series_name = Symbol(row[:Series])
    code = row[:Transformation_Code]
    @show series_name, code
    df_proof[!, series_name] = apply_transformation(df_proof[!, series_name], code)
end

df_cleaned = df_cleaned[3:end, :]

p1 = plot(df_cleaned.sasdate, df_cleaned.INDPRO, label="Industrial Production", legend=:none, xlabel="Date", ylabel="INDPRO", title="Industrial Production")
p2 = plot(df_cleaned.sasdate, df_cleaned.CPIAUCSL, label="CPI", legend=:none, xlabel="Date", ylabel="CPIAUCSL", title="Consumer Price Index")
p3 = plot(df_cleaned.sasdate, df_cleaned.FEDFUNDS, label="FED FUNDS",  legend=:none, xlabel="Date", ylabel="FED FUNDS", title="FED FUNDS")
plot(p1, p2, p3, layout=(3, 1), size=(800, 600))


                                                #*** FORECAST ***#

Y = df_cleaned[!, :INDPRO]

X = Matrix(df_cleaned[!, [:CPIAUCSL, :FEDFUNDS]])

                            #***    I THINK THE ASSIGNMENT STARTS FROM HERE    ***#

# questi sono i lag
h = 1 
p = 4
r = 4

#= --------THIS STARTS OUR SCRIPT--------
this is a first try to forecast the inflation growth=#

function prev(G::Matrix,L::Vector)
    L_target = lead(L, 1)
    L_lagged = hcat([lag(L, i) for i in 0:p]...)
    G_lagged = hcat([lag(G[:, j], i) for i in 0:r, j in 1:size(G, 2)]...)

## For the forecast last row of the X which will get removed later
    G_T = [1; [L_lagged G_lagged][end,:]]

    L_reg = L_target[max(p,r)+1:(end-h)]
    G_reg = hcat(ones(size(L_reg, 1)), L_lagged[max(p,r)+1:(end-h),:], G_lagged[max(p,r)+1:(end-h), :])

# OLS estimator using the Normal Equation
    beta_ols = G_reg \ L_reg
    

# Produce the One-step ahead forecast and convert it to percentage
  return forecast = (G_T' * beta_ols)*100 
end

C=df_cleaned[50:end,:sasdate]
my_vector=[]
    
df_cleaned.INDPRO
                                        
for tt in 50:size(df_cleaned,1)
    subspace = df_cleaned[1:tt,:]
    A=Matrix(subspace[!,[:CPIAUCSL,:FEDFUNDS]])
    B=subspace[!,:INDPRO]
    l = prev(A,B)
    push!(my_vector, l)
end

final_matrix =  hcat(C,my_vector)
#= plot con i valori non modificati p6 = plot(df_cleaned.sasdate, df_cleaned.INDPRO,linewidth=4, label="Actual INDPRO")
ylims!(p6, 0, 106)
p7 = plot!(final_matrix[:,1],(final_matrix[:,2]/100),linewidth=1, label="Forecast")
ylims!(p7, 0, 106)      =#                   
                                        
p8 =plot(df_proof.sasdate, df_proof.INDPRO, linewidth=2, label="Actual INDPRO")
ylims!(p8, -0.15, +0.09)
p9 = plot!(final_matrix[:,1],(mdiff(final_matrix[:,2])/10000), linewidth=1, label="Forecast")
ylims!(p9,-0.15, +0.09) 

####****---- FORECAST CPIAUCSL ----****####

my_vector1 = []

for tt in 50:size(df_cleaned,1)
    subspace = df_cleaned[1:tt,:]
   A=Matrix(subspace[!,[:UNRATE,:M1SL,:FEDFUNDS]])
   B=subspace[!,:CPIAUCSL]
   l = prev(A,B)
   push!(my_vector1, l)
end

  final_matrix1 =  hcat(C,my_vector1)

#= plot con i valori non modificati p10 = plot(df_cleaned.sasdate, df_cleaned.CPIAUCSL, linewidth=5, label="Actual CPI")
ylims!(p10, 0, 350) 
p11 = plot!(final_matrix1[:,1],(final_matrix1[:,2]/100), linewidth=1,label="Forecast")
ylims!(p11, 0, 350)     =#

@show(df_proof.CPIAUCSL)


p12 =plot(df_proof.sasdate, df_proof.CPIAUCSL, linewidth=2, label="Actual CPI")
ylims!(p12, -0.30, +0.30)
p13 = plot!(final_matrix1[:,1],(mdiff(mdiff(log.(final_matrix1[:,2])))), linewidth=1,label="Forecast")
ylims!(p13, -0.30, +0.40)

####****---- FORECAST FEDFUNDS ----****####

my_vector2=[]

for tt in 50:size(df_cleaned,1)
    subspace = df_cleaned[1:tt,:]
   A=Matrix(subspace[!,[:UNRATE,:M1SL,:CPIAUCSL]])
   B=subspace[!,:FEDFUNDS]
   l =prev(A,B)
   push!(my_vector2, l)
end

  final_matrix2 =  hcat(C,my_vector2)

  @show(df_cleaned.FEDFUNDS)

#= plot con i valori non modificati p14=plot(df_cleaned.sasdate, df_cleaned.FEDFUNDS)
p15=plot!(final_matrix2[:,1],(final_matrix2[:,2])/1000)=#

p16 =plot(df_proof.sasdate, df_proof.FEDFUNDS, linewidth=2, label="FEDFUNDS")
p17 = plot!(final_matrix2[:,1],(mdiff(final_matrix2[:,2]/1000)), linewidth=1,label="Forecast")
